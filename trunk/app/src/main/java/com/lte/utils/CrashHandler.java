package com.lte.utils;/////**// * Created by chenxiaojun on 2017/10/31.// */////import java.io.BufferedWriter;//import java.io.File;//import java.io.FileOutputStream;//import java.io.FilenameFilter;//import java.io.OutputStreamWriter;//import java.io.PrintWriter;//import java.io.StringWriter;//import java.io.Writer;//import java.lang.reflect.Field;//import java.text.DateFormat;//import java.text.SimpleDateFormat;//import java.util.Date;//import java.util.HashMap;//import java.util.Map;////import android.annotation.SuppressLint;//import android.content.Context;//import android.content.pm.PackageInfo;//import android.content.pm.PackageManager;//import android.os.Build;//import android.os.Environment;//import android.os.Looper;//import android.os.SystemClock;//import android.util.Log;//import android.widget.Toast;////import com.communication.utils.FileUtil;//import com.lte.ui.event.SystemOutEvent;////import org.greenrobot.eventbus.EventBus;/////**// * <h3>全局捕获异常</h3>// * <br>// * 当程序发生Uncaught异常的时候,有该类来接管程序,并记录错误日志// *///@SuppressLint("SimpleDateFormat")//public class CrashHandler implements Thread.UncaughtExceptionHandler {////    public static String TAG = "MyCrash";//    // 系统默认的UncaughtException处理类//    private Thread.UncaughtExceptionHandler mDefaultHandler;////    private static CrashHandler instance = new CrashHandler();//    private Context mContext;////    // 用来存储设备信息和异常信息//    private Map<String, String> infos = new HashMap<String, String>();////    // 用于格式化日期,作为日志文件名的一部分//    private DateFormat formatter = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");////    /**//     * 保证只有一个CrashHandler实例//     *///    private CrashHandler() {//    }////    /**//     * 获取CrashHandler实例 ,单例模式//     *///    public static CrashHandler getInstance() {//        return instance;//    }////    /**//     * 初始化//     *//     * @param context//     *///    public void init(Context context) {//        mContext = context;//        // 获取系统默认的UncaughtException处理器//        mDefaultHandler = Thread.getDefaultUncaughtExceptionHandler();//        // 设置该CrashHandler为程序的默认处理器//        Thread.setDefaultUncaughtExceptionHandler(this);//        autoClear(10);//    }////    /**//     * 当UncaughtException发生时会转入该函数来处理//     *///    @Override//    public void uncaughtException(Thread thread, Throwable ex) {//        if (!handleException(ex) && mDefaultHandler != null) {//            // 如果用户没有处理则让系统默认的异常处理器来处理//            mDefaultHandler.uncaughtException(thread, ex);//        } else {//            SystemClock.sleep(3000);//            // 退出程序//            EventBus.getDefault().post(new SystemOutEvent(true));////            android.os.Process.killProcess(android.os.Process.myPid());////            System.exit(0);//        }//    }////    /**//     * 自定义错误处理,收集错误信息 发送错误报告等操作均在此完成.//     *//     * @param ex//     * @return true:如果处理了该异常信息; 否则返回false.//     *///    private boolean handleException(Throwable ex) {//        if (ex == null)//            return false;////        try {//            // 使用Toast来显示异常信息//            new Thread() {////                @Override//                public void run() {//                    Looper.prepare();//                    Toast.makeText(mContext, "很抱歉,程序出现异常,即将退出，详细信息请查看手机LET文件夹crash文件",//                            Toast.LENGTH_LONG).show();//                    Looper.loop();//                }//            }.start();//            // 收集设备参数信息//            collectDeviceInfo(mContext);//            // 保存日志文件//            saveCrashInfoFile(ex);//            SystemClock.sleep(3000);//        } catch (Exception e) {//            e.printStackTrace();//        }////        return true;//    }////    /**//     * 收集设备参数信息//     *//     * @param ctx//     *///    public void collectDeviceInfo(Context ctx) {//        try {//            PackageManager pm = ctx.getPackageManager();//            PackageInfo pi = pm.getPackageInfo(ctx.getPackageName(),//                    PackageManager.GET_ACTIVITIES);//            if (pi != null) {//                String versionName = pi.versionName + "";//                String versionCode = pi.versionCode + "";//                infos.put("versionName", versionName);//                infos.put("versionCode", versionCode);//            }//        } catch (PackageManager.NameNotFoundException e) {//            Log.e(TAG, "an error occured when collect package info", e);//        }//        Field[] fields = Build.class.getDeclaredFields();//        for (Field field : fields) {//            try {//                field.setAccessible(true);//                infos.put(field.getName(), field.get(null).toString());//            } catch (Exception e) {//                Log.e(TAG, "an error occured when collect crash info", e);//            }//        }//    }////    /**//     * 保存错误信息到文件中//     *//     * @param ex//     * @return 返回文件名称, 便于将文件传送到服务器//     * @throws Exception//     *///    private String saveCrashInfoFile(Throwable ex) throws Exception {//        StringBuffer sb = new StringBuffer();//        try {//            SimpleDateFormat sDateFormat = new SimpleDateFormat(//                    "yyyy-MM-dd HH:mm:ss");//            String date = sDateFormat.format(new java.util.Date());//            sb.append("\r\n" + date + "\n");//            for (Map.Entry<String, String> entry : infos.entrySet()) {//                String key = entry.getKey();//                String value = entry.getValue();//                sb.append(key + "=" + value + "\n");//            }////            Writer writer = new StringWriter();//            PrintWriter printWriter = new PrintWriter(writer);//            ex.printStackTrace(printWriter);//            Throwable cause = ex.getCause();//            while (cause != null) {//                cause.printStackTrace(printWriter);//                cause = cause.getCause();//            }//            printWriter.flush();//            printWriter.close();//            String result = writer.toString();//            sb.append(result);////            String fileName = writeFile(sb.toString());//            return fileName;//        } catch (Exception e) {//            Log.e(TAG, "an error occured while writing file...", e);//            sb.append("an error occured while writing file...\r\n");//            writeFile(sb.toString());//        }//        return null;//    }////    private String writeFile(String sb) throws Exception {//        String time = formatter.format(new Date());//        String fileName = "crash-" + time + ".log";////        if (FileUtil.hasSdcard()) {//        String path = getGlobalpath();//        File dir = new File(path + "/LTE");//        if (!dir.exists())//            dir.mkdirs();//        if (!dir.exists())//            dir.mkdir();//        File dir1 = new File(path + "/LTE/crash");//        if (!dir1.exists())//            dir1.mkdir();//        File file = new File(dir1, fileName);//        if (!file.exists())//            file.createNewFile();//        FileOutputStream fos = new FileOutputStream(file);//        OutputStreamWriter osw = new OutputStreamWriter(fos);//        BufferedWriter mWriter = new BufferedWriter(osw, 1024);//        mWriter.write(sb);//        mWriter.flush();//        mWriter.close();////        }//        return fileName;//    }////    public static String getGlobalpath() {//        return Environment.getExternalStorageDirectory().getPath();//    }////    public static void setTag(String tag) {//        TAG = tag;//    }////    /**//     * 文件删除//     *//     * @param autoClearDay 文件保存天数//     *///    public void autoClear(final int autoClearDay) {//        FileUtil.delete(getGlobalpath() + "/LTE/crash", new FilenameFilter() {////            @Override//            public boolean accept(File file, String filename) {//                String s = FileUtil.getFileNameWithoutExtension(filename);//                int day = autoClearDay < 0 ? autoClearDay : -1 * autoClearDay;//                String date = "crash-" + DateUtils.getOtherDay(day);//                return date.compareTo(s) >= 0;//            }//        });////    }//////}import java.io.File;import java.io.FileOutputStream;import java.io.PrintWriter;import java.io.StringWriter;import java.io.Writer;import java.text.DateFormat;import java.text.SimpleDateFormat;import java.util.Date;import java.util.Locale;import android.Manifest;import android.content.Context;import android.content.pm.PackageManager;import android.os.Build;import android.os.Environment;import android.support.v4.app.ActivityCompat;import android.support.v4.content.ContextCompat;import android.util.Log;public class CrashHandler implements Thread.UncaughtExceptionHandler {	private static CrashHandler mInstance;	private static final String TAG = "CRASHHANDLER";	private Context mContext;	private Thread.UncaughtExceptionHandler mLocalExceptionHandler;	private boolean mInitialized = false;	final int REQUEST_WRITE=1;//申请权限的请求码	private CrashHandler() {	}	public static CrashHandler getInstance() {		synchronized (CrashHandler.class) {			if (mInstance == null) {				mInstance = new CrashHandler();			}		}		return mInstance;	}	public void initialize(Context context) {		if (mInitialized) {			return;		}		mContext = context;		mLocalExceptionHandler = Thread.getDefaultUncaughtExceptionHandler();		Thread.setDefaultUncaughtExceptionHandler(this);		mInitialized = true;	}	@Override	public void uncaughtException(Thread thread, Throwable throwable) {		// TODO Auto-generated method stub		handleException(throwable);		//如果用户没有处理则让系统默认的异常处理器来处理		if (mLocalExceptionHandler != null) {			mLocalExceptionHandler.uncaughtException(thread, throwable);		} else {			try {				Thread.sleep(2000);			} catch (InterruptedException e) {				Log.e(TAG, "error : ", e);			}			//退出程序			android.os.Process.killProcess(android.os.Process.myPid());			System.exit(1);		}	}	public boolean handleException(Throwable throwable) {		if (throwable == null) {			return false;		}		//保存日志文件		saveCrashInfo2File(throwable);		return true;	}	private String saveCrashInfo2File(Throwable throwable) {		StringBuffer sb = new StringBuffer();		sb.append("Error information:\n");		Writer writer = new StringWriter();		PrintWriter printWriter = new PrintWriter(writer);		throwable.printStackTrace(printWriter);		Throwable cause = throwable.getCause();		while (cause != null) {			cause.printStackTrace(printWriter);			cause = cause.getCause();		}		printWriter.close();		String result = writer.toString();		sb.append(result);		try {			DateFormat formatter = new SimpleDateFormat("yyyy_MM_dd_HH_mm_ss_SSSS", Locale.getDefault());			String time = formatter.format(new Date(System.currentTimeMillis()));			String fileName = "crash_" + time + ".log";			Log.i(TAG, fileName);			File file = new File("/storage/sdcard0/crash");			if (!file.exists()) {				file.mkdir();			}			Log.i(TAG, "file: " + file.toString());			//判断是否6.0以上的手机   不是就不用			if(Build.VERSION.SDK_INT>=23){				//判断是否有这个权限				if(ContextCompat.checkSelfPermission(mContext, Manifest.permission.WRITE_EXTERNAL_STORAGE)!= PackageManager.PERMISSION_GRANTED){					//2、申请权限: 参数二：权限的数组；参数三：请求码					Log.i(TAG, "---申请权限--没有权限-- ");//					ActivityCompat.requestPermissions(mContext,new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE},REQUEST_WRITE);				}else {					Log.i(TAG, "---writeToSdCard:1 ");					writeToSdCard(sb.toString());				}			} else{				Log.i(TAG, "---Api<23-- ");				writeToSdCard(sb.toString());			}//            FileOutputStream fos = new FileOutputStream(new File(file, fileName));//            fos.write(sb.toString().getBytes());//            fos.close();			return fileName;		} catch (Exception e) {			Log.e(TAG, "an error occured while writing file...", e);		}		return null;	}	//写数据	public void writeToSdCard(String log){		//1、判断sd卡是否可用		if(Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)){			//sd卡可用			//2、获取sd卡路径			DateFormat formatter = new SimpleDateFormat("yyyy_MM_dd_HH_mm", Locale.getDefault());			String time = formatter.format(new Date(System.currentTimeMillis()));			String fileName = "Crash_" + time;			File sdFile=Environment.getExternalStorageDirectory();			File path=new File(sdFile,fileName+".txt");//sd卡下面的a.txt文件  参数 前面 是目录 后面是文件			try {				FileOutputStream fileOutputStream=new FileOutputStream(path);				fileOutputStream.write(log.getBytes());			} catch (Exception e) {				e.printStackTrace();			}		}	}}